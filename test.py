import logging
import asyncio
import os
import datetime
import pandas as pd
from aiogram import Bot, Dispatcher, types, F, Router
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from pymongo import MongoClient
from dotenv import load_dotenv
from datetime import timezone
from aiogram.types import FSInputFile
import ollama
import json

# –ó–∞–≥—Ä—É–∑–∫–∞ FAQ (JSON —Ñ–∞–π–ª) –≤ –ø–∞–º—è—Ç—å
def load_faq():
    with open("faq.json", "r", encoding="utf-8") as file:
        return json.load(file)

faq_data = load_faq()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –æ—Ç–≤–µ—Ç–∞ –≤ JSON
def get_answer_from_faq(user_input):
    for item in faq_data:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –æ–±–∞ –≤–æ–∑–º–æ–∂–Ω—ã—Ö –∫–ª—é—á–∞
        question = item.get("question") or item.get("input")

        if question and question.lower() in user_input.lower():
            return item.get("answer") or item.get("output")
    return None


# =======================
# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
# =======================
load_dotenv()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")
MONGO_URI = os.getenv("MONGO_URI")



if not TOKEN:
    raise ValueError("‚ùå TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env!")
if not MONGO_URI:
    raise ValueError("‚ùå MONGO_URI –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env!")

# =======================
# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
# =======================
logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

# =======================
# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ openpyxl
# =======================
try:
    import openpyxl
except ImportError:
    raise ImportError("‚ùå OpenPyXL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω! –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install openpyxl")

# =======================
# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
# =======================
bot = Bot(token=TOKEN)
storage = MemoryStorage()
dp = Dispatcher()
router = Router()

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB
try:
    mongo_client = MongoClient(MONGO_URI)
    db = mongo_client["service_desk"]
    requests_collection = db["requests"]
    logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
except Exception as e:
    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
    exit(1)


# =======================
# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
# =======================
class RequestForm(StatesGroup):
    waiting_for_request = State()


# =======================
# –û—Å–Ω–æ–≤–Ω–æ–µ –º–µ–Ω—é (–∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞)
# =======================
main_menu_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text="üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")],
        [KeyboardButton(text="üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞")],
        [KeyboardButton(text="üìà –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")],
        [KeyboardButton(text="üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ö–ü–î")],
        [KeyboardButton(text="‚ùì –ü–æ–º–æ—â—å")]
    ],
    resize_keyboard=True
)


# =======================
# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /start
# =======================
@router.message(F.text == "/start")
async def cmd_start(message: types.Message):
    start_text = (
        "üëã *–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Service Desk Bot!*\n\n"
        "üí° –≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞—è–≤–∫–∞–º–∏ –∏ –ø–æ–ª—É—á–∞—Ç—å –æ—Ç—á–µ—Ç—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é –Ω–∏–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/help`, —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å –±–æ–ª—å—à–µ."
    )
    await message.answer(start_text, reply_markup=main_menu_kb, parse_mode="Markdown")


# =======================
# –•–µ–Ω–¥–ª–µ—Ä –∫–æ–º–∞–Ω–¥—ã /help
# =======================
@router.message(F.text == "/help")
async def cmd_help(message: types.Message):
    help_text = (
        "‚Ñπ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –∫–Ω–æ–ø–∫–∏:*\n\n"
        "üì© *–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å* ‚Äî —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—É—é –∑–∞—è–≤–∫—É.\n"
        "üìã *–ú–æ–∏ –∑–∞—è–≤–∫–∏* ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤–∞—à–∏ –∑–∞—è–≤–∫–∏.\n"
        "üìà *–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç* ‚Äî –≤—ã–≥—Ä—É–∑–∏—Ç—å –æ—Ç—á–µ—Ç –≤ Excel.\n"
        "üìä *–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ö–ü–î* ‚Äî —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞—è–≤–æ–∫.\n\n"
        "üí° –¢–∞–∫–∂–µ –¥–æ—Å—Ç—É–ø–Ω—ã —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "üîπ `/my_requests` ‚Äî —Å–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö –∑–∞—è–≤–æ–∫.\n"
        "üîπ `/update_status <id> <—Å—Ç–∞—Ç—É—Å>` ‚Äî –æ–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏.\n"
        "    *–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å—Ç–∞—Ç—É—Å—ã:* `–í –æ–±—Ä–∞–±–æ—Ç–∫–µ`, `–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ`, `–ó–∞–≤–µ—Ä—à–µ–Ω–æ`. –ü—Ä–∏–º–µ—Ä: `/update_status 65fc3a1b2f9a3c7f0c1d4a12 –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ`\n"
        "üîπ `/export` ‚Äî —Å–∫–∞—á–∞—Ç—å –æ—Ç—á–µ—Ç.\n"
        "üîπ `/kpi` ‚Äî –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ö–ü–î.\n"
        "üîπ `/cancel` ‚Äî –æ—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥ –∑–∞—è–≤–∫–∏.\n\n"
        "üìå *–í—ã –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞ –∫ —Ñ—É–Ω–∫—Ü–∏—è–º!*"
    )
    await message.answer(help_text, parse_mode="Markdown")




# =======================
# –ü—Ä–∏–µ–º –∑–∞–ø—Ä–æ—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# =======================
@router.message(F.text == "üì© –û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å")
async def send_request(message: types.Message, state: FSMContext):
    await state.set_state(RequestForm.waiting_for_request)
    await message.answer("‚úè –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–ø—Ä–æ—Å–∞:")

@router.message(F.text == "/my_requests")
async def my_requests(message: types.Message):
    # –£–∫–∞–∑—ã–≤–∞–µ–º, –∫–∞–∫–∏–µ –ø–æ–ª—è –º—ã —Ö–æ—Ç–∏–º –ø–æ–ª—É—á–∏—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤—Å–µ –ø–æ–ª—è)
    user_requests = list(
        requests_collection.find(
            {},  # –§–∏–ª—å—Ç—Ä –ø–æ user_id
            {"_id": 1, "text": 1, "status": 1, "created_at": 1}  # –ü—Ä–æ–µ–∫—Ü–∏—è (–∫–∞–∫–∏–µ –ø–æ–ª—è –≤–µ—Ä–Ω—É—Ç—å)
        )
    )

    if not user_requests:
        await message.answer("üì≠ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –∑–∞—è–≤–æ–∫.")
        return

    request_lines = [
        f"üîπ ID: `{str(req['_id'])}`\n–¢–µ–∫—Å—Ç: {req['text']}\n–°—Ç–∞—Ç—É—Å: *{req['status']}*\n–î–∞—Ç–∞: {req['created_at'].strftime('%Y-%m-%d %H:%M')}"
        for req in user_requests
    ]

    await message.answer("\n\n".join(request_lines), parse_mode="Markdown")


@router.message(F.text == "/cancel")
async def cancel_request(message: types.Message, state: FSMContext):
    await state.clear()
    await message.answer("‚ùå –í–≤–æ–¥ –∑–∞—è–≤–∫–∏ –æ—Ç–º–µ–Ω–µ–Ω.", reply_markup=main_menu_kb)


from bson import ObjectId


@router.message(F.text.startswith("/update_status"))
async def update_status(message: types.Message):
    try:
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –§–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã: `/update_status <id> <—Å—Ç–∞—Ç—É—Å>`", parse_mode="Markdown")
            return

        request_id, new_status = parts[1], " ".join(parts[2:])

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ request_id –≤–∞–ª–∏–¥–Ω—ã–º ObjectId
        try:
            request_id = ObjectId(request_id)
        except Exception:
            await message.answer("‚ùå –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π ID –∑–∞—è–≤–∫–∏.")
            return

        result = requests_collection.update_one({"_id": request_id}, {"$set": {"status": new_status}})

        if result.matched_count == 0:
            await message.answer("‚ùå –ó–∞–ø—Ä–æ—Å —Å —Ç–∞–∫–∏–º ID –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        else:
            status_message = f"‚úÖ –°—Ç–∞—Ç—É—Å –∑–∞—è–≤–∫–∏ `{request_id}` –æ–±–Ω–æ–≤–ª–µ–Ω –Ω–∞: *{new_status}*"

            # –ï—Å–ª–∏ –∑–∞—è–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞, –¥–æ–±–∞–≤–∏—Ç—å —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ
            if new_status.lower() in ["–æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ", "–∑–∞–≤–µ—Ä—à–µ–Ω–æ", "–∑–∞–∫—Ä—ã—Ç–æ"]:
                status_message += "\n‚úÖ –≠—Ç–∞ –∑–∞—è–≤–∫–∞ —Ç–µ–ø–µ—Ä—å —Å—á–∏—Ç–∞–µ—Ç—Å—è –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–π."

            await message.answer(status_message, parse_mode="Markdown")

    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞.")


@router.message(RequestForm.waiting_for_request, F.text)
async def process_request(message: types.Message, state: FSMContext):
    request_text = message.text
    request_data = {
        "user_id": message.from_user.id,
        "username": message.from_user.username or "–ê–Ω–æ–Ω–∏–º",
        "text": request_text,
        "status": "–í –æ–±—Ä–∞–±–æ—Ç–∫–µ",
        "created_at": datetime.datetime.now(timezone.utc)
    }
    result = requests_collection.insert_one(request_data)
    logger.info(f"‚úÖ –ó–∞–ø—Ä–æ—Å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω —Å id: {result.inserted_id}")
    await message.answer("‚úÖ –í–∞—à –∑–∞–ø—Ä–æ—Å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω! –°–ø–∞—Å–∏–±–æ.")
    await state.clear()


# =======================
# –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞ (—Å–≤–æ–¥–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º)
# =======================
@router.message(F.text == "üìã –ü—Ä–æ—Å–º–æ—Ç—Ä –æ—Ç—á–µ—Ç–∞")
async def view_report(message: types.Message):
    requests = list(
        requests_collection.find({}, {"_id": 0, "username": 1, "text": 1, "status": 1, "created_at": 1}).sort(
            "created_at", -1))
    if not requests:
        await message.answer("üì≠ –ù–∞ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–µ—Ç.")
        return

    report_lines = []
    for req in requests[-100:]:
        created_str = req["created_at"].strftime("%Y-%m-%d %H:%M") if isinstance(req["created_at"],
                                                                                 datetime.datetime) else str(
            req["created_at"])
        report_lines.append(f"üîπ {req['username']}: {req['text']}\n–°—Ç–∞—Ç—É—Å: {req['status']}, {created_str}")

    report_text = "\n\n".join(report_lines)
    await message.answer(report_text)



# =======================
# –≠–∫—Å–ø–æ—Ä—Ç –æ—Ç—á–µ—Ç–∞ –≤ Excel
# =======================



@router.message(F.text == "üìà –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç")
async def export_report(message: types.Message):
    requests = list(requests_collection.find({}, {"_id": 0, "username": 1, "text": 1, "status": 1, "created_at": 1}))
    if not requests:
        await message.answer("‚ùå –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è —ç–∫—Å–ø–æ—Ä—Ç–∞.")
        return

    df = pd.DataFrame(requests)
    df["created_at"] = df["created_at"].apply(
        lambda x: x.strftime("%Y-%m-%d %H:%M") if isinstance(x, datetime.datetime) else str(x))

    file_name = "service_desk_report.xlsx"
    try:
        df.to_excel(file_name, index=False)
        excel_file = FSInputFile(file_name)
        await message.answer_document(excel_file, caption="üìÇ –í–∞—à –æ—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ Excel.")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ: {e}")
        await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —ç–∫—Å–ø–æ—Ä—Ç–µ –æ—Ç—á–µ—Ç–∞.")
    finally:
        if os.path.exists(file_name):
            os.remove(file_name)  # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –¥–∞–∂–µ –µ—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞

@router.message(F.text == "‚ùì –ü–æ–º–æ—â—å")
async def help_command(message: types.Message):
    # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—É /help
    await message.bot.send_message(message.chat.id, "/help", reply_markup=main_menu_kb)

# =======================
# –†–∞—Å—á–µ—Ç –ö–ü–î (–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–∏–≤–Ω—ã–µ –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏)
# =======================
@router.message(F.text == "üìä –ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ö–ü–î")
async def kpi_report(message: types.Message):
    total_requests = requests_collection.count_documents({})
    processed_requests = requests_collection.count_documents({"status": {"$in": ["–û–±—Ä–∞–±–æ—Ç–∞–Ω–æ", "–ì–æ—Ç–æ–≤–æ", "–ó–∞–∫—Ä—ã—Ç–æ"]}})
    kpi_percentage = (processed_requests / total_requests * 100) if total_requests > 0 else 0
    await message.answer(f"üìä –ö–ü–î: {kpi_percentage:.2f}%", parse_mode="Markdown")




# =======================
# –§–æ–ª–±—ç–∫-—Ö–µ–Ω–¥–ª–µ—Ä
# =======================




@router.message()
async def ollama_fallback_handler(message: types.Message):
    user_input = message.text

    # –°–Ω–∞—á–∞–ª–∞ –∏—â–µ–º –æ—Ç–≤–µ—Ç –≤ FAQ
    faq_answer = get_answer_from_faq(user_input)

    if faq_answer:
        # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –æ—Ç–≤–µ—Ç –≤ FAQ
        await message.answer(f"ü§ñ {faq_answer}")
    else:
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏, –æ–±—Ä–∞—â–∞–µ–º—Å—è –∫ Ollama
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –≤ Ollama
            response = ollama.generate(
                model="llama3.2",
                prompt=user_input,
                system="–¢—ã ‚Äî —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –±–æ—Ç Service Desk. –¢—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                   "–¢—ã –¥–æ–ª–∂–µ–Ω –ø–æ–º–æ–≥–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è —Å –∫–æ–º–∞–Ω–¥–∞–º–∏ –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª–æ–º –±–æ—Ç–∞. "
                   "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –ø–æ–Ω–∏–º–∞–µ—Ç, –∫–∞–∫ —Å–æ–∑–¥–∞—Ç—å –∑–∞—è–≤–∫—É, –æ–±—ä—è—Å–Ω–∏, —á—Ç–æ –Ω—É–∂–Ω–æ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üì© '–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∑–∞–ø—Ä–æ—Å' –≤ –º–µ–Ω—é –∏–ª–∏ "
                   "–≤–≤–µ—Å—Ç–∏ —Ç–µ–∫—Å—Ç –∑–∞—è–≤–∫–∏ –≤—Ä—É—á–Ω—É—é –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã. "
                   "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–ø—Ä–∞—à–∏–≤–∞–µ—Ç, –∫–∞–∫ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å –∑–∞—è–≤–∫–∏, –ø—Ä–µ–¥–ª–æ–∂–∏ –Ω–∞–∂–∞—Ç—å –∫–Ω–æ–ø–∫—É üìã '–ú–æ–∏ –∑–∞—è–≤–∫–∏' –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É `/my_requests`. "
                   "–î–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –∑–∞—è–≤–∫–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–∞ `/update_status <id> <—Å—Ç–∞—Ç—É—Å>`, "
                   "–∞ –¥–ª—è –≤—ã–≥—Ä—É–∑–∫–∏ –æ—Ç—á–µ—Ç–∞ –≤ Excel ‚Äî –∫–Ω–æ–ø–∫–∞ üìà '–≠–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç' –∏–ª–∏ –∫–æ–º–∞–Ω–¥–∞ `/export`. "
                   "–¢–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Å –ø–æ–º–æ—â—å—é üìä '–ü–æ–∫–∞–∑–∞—Ç–µ–ª–∏ –ö–ü–î' –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã `/kpi`. "
                   "–ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∫–æ–º–∞–Ω–¥–æ–π, –ø–æ–ø—Ä–æ–±—É–π –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –µ–≥–æ –≤–æ–ø—Ä–æ—Å. "
                   "–ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–º–æ–≥–∞–π —Å —Ä–∞–±–æ—Ç–æ–π —Å –±–æ—Ç–æ–º –∏ MongoDB."
            )

            # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ–ª–∏
            ollama_answer = response['response']
            await message.answer(f"ü§ñ {ollama_answer}")

        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Ollama: {e}")
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

# =======================
# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
# =======================
async def main():
    dp.include_router(router)
    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())